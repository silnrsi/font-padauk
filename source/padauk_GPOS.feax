#-----------------------------------------------------------------------
# Additional dist needed for some cons to clear u103C

@class103CNarr = [u103C      u103C.alt.narr u103C.open.narr u103C.alt.open.narr u103C_u103D.narr u103C_u103D.alt.narr u103C_u102F.narr u103C_u102F.alt.narr u103C_u103D.alt.narr.tri u103C_u103D.narr.tri]; 
@class103CWide = [u103C.wide u103C.alt.wide u103C.open.wide u103C.alt.open.wide u103C_u103D.wide u103C_u103D.alt.wide u103C_u102F.wide u103C_u102F.alt.wide u103C_u103D.alt.wide.tri u103C_u103D.wide.tri]; 

lookup kernltall {
do  for g = [@KL];
    let x = -int(APx(g, "KL") / 2);
    {
        pos $g <$x 0 $x 0>;
    }
} kernltall;

lookup kerntall {
    pos [@class103CNarr @class103CWide] @cCons @KL' lookup kernltall;
    pos [@class103CNarr @class103CWide] @cCons @cLowerMarkAttach @KL' lookup kernltall;
    pos [@class103CNarr @class103CWide] @cCons @cLowerMarkAttach @cLowerMarkAttach @KL' lookup kernltall;
    pos @_U @KL' lookup kernltall;
} kerntall;

def calc_guard(g) {
    m = "u1000.med"
    o = APx(m, "_BD") - APx(g, "BD")
    l = o - MINx(m) - ADVx(m) - MAXx(m)
    l = l if l > 0 else 0
    r = ADVx(m) - ADVx(g) - o
    r = r if r > 0 else 0
    return (l, r)
} calc_guard;
    
do  let b = feaclass("cConsNarStack");
    let res = " ".join([x for x in b if sum(calc_guard(x)) > 0]);
    { @guard_glyphs = [ $res ]; }

lookup guarda {
do  for b = [@cConsNarStack];
    let x = calc_guard(b);
    let l = x[0];
    let a = l + x[1];
    if a > 0;
    {
        pos $b <$l 0 $a 0>;
    }
} guarda;

lookup guardb {
do  for b = [@cConsNarStack];
    let x = calc_guard(b);
    let r = x[1];
    if x[0] + r > 0;
    {
        pos $b <0 0 $r 0>;
    }
} guardb;

lookup guardc {
do  for b = [@cConsNarStack];
    let x = calc_guard(b);
    let l = x[0];
    if l + x[1] > 0;
    {
        pos $b <$l 0 $l 0>;
    }
} guardc;

@guard_before = [@cFillLowBefore @cLowerMarkAttach];

lookup guard_context {
# overlaps of below wide medials under a narrow consonant
    ignore pos @guard_glyphs' @_U [u1083 u1064] @cTone;
    ignore pos @guard_glyphs' @_U @cTone;
    pos @guard_before @usvowel @guard_glyphs' lookup guarda @cMedWide @_U @cFillLowAfter;
    pos @guard_before @usvowel @guard_glyphs' lookup guarda @cMedWide @cFillLowAfter;
    pos @guard_before @guard_glyphs' lookup guarda @cMedWide @_U @cFillLowAfter;
    pos @guard_before @guard_glyphs' lookup guarda @cMedWide @cFillLowAfter;
    pos @guard_before @usvowel @guard_glyphs' lookup guardc @cMedWide;
    pos @guard_before @guard_glyphs' lookup guardc @cMedWide;
    pos @guard_glyphs' lookup guardb @cMedWide @_U @cFillLowAfter;
    pos @guard_glyphs' lookup guardb @cMedWide @cFillLowAfter; 
} guard_context;

lookup guard2 {
# overlaps of upper consonants
do  for b = [@U];
    for u = [@_U];
    let o = APx(u, "_U") - APx(b, "U");
    let l = o - MINx(u) - ADVx(u) - MAXx(u);
    let l = l if l > 0 else 0;
    let r = ADVx(u) - ADVx(b) - o;
    let a = l + (r if r > 0 else 0) if (u.find("kinzi") != -1 and b in feaclass("cConsTakesKinzi")) or \
        (u.find("uAA7C") != -1 and b in feaclass("cConsLaing")) or \
        (u.find("kinzi") == -1 and u.find("uAA7C") == -1 and b[:4] not in ("u106", "u109") \
            and b[:5] not in ("u102C", "u102F", "u1030", "u103B", "u1062", "u1064", "u1083") \
            and b not in ("u1008.med", "u105B.med")) else 0;
    if a > 50;
    {
        pos $b <$l 0 $a 0> $u;
    }
} guard2;

lookup guard2_context {
    ignore pos @cCons' @_U [u1083 u1064] @cTone;
    ignore pos @cCons' @_U @cTone;
    ignore pos @cCons @cCons' [u1032_u102D u1032_u102E];
    pos @cCons' lookup guard2;
} guard2_context;

do  let bases = feaclass("L");
    let g = "u1037";
    let a = [(b, APx(b, "L") - APx(g, "_L") + ADVx(g) - ADVx(b)) for b in bases];
    let v = " ".join([x[0] for x in a if not x[0].startswith("u103C") and x[1] > 0]);
    { @guard_bases = [ $v ]; }

do  let bases = feaclass("LM_MarkBase");
    let g = "u1037";
    let a = [(b, APx(b, "LM") - APx(g, "_LM") + ADVx(g) - ADVx(b)) for b in bases];
    let v = " ".join([x[0] for x in a if not x[0].startswith("u103C") and x[1] > 0]);
    { @guard_basedots = [ $v ]; }

lookup guard_dot {
# wish we could update some notional advance in the base from the previous set of rules
# right hanging U+1037
do  for b = [@L];
    let g = "u1037";
    let a = APx(b, "L") - APx(g, "_L") + ADVx(g) - ADVx(b);
    if not b.startswith("u103C") and a > 0;
    {
        pos $b $a;
    }
do  for b = [@LM_MarkBase];
    let g = "u1037";
    let a = APx(b, "LM") - APx(g, "_LM") + ADVx(g) - ADVx(b);
    if not b.startswith("u103C") and a > 0;
    {
        pos $b $a;
    }
} guard_dot;


lookup guard_dot_context {
    pos @guard_bases' lookup guard_dot [@_U] u1037 @cFillLowAfter;
    pos @guard_bases' lookup guard_dot u1037 @cFillLowAfter;
    pos @guard_basedots' lookup guard_dot [@_U] u1037 @cFillLowAfter;
    pos @guard_basedots' lookup guard_dot u1037 @cFillLowAfter;
} guard_dot_context;

lookup dist_103C_Cons {
# Move consnarr with wide base to the middle of the u103c.wide. Only needed for sanskrit
do  for c = [@cConsNarStack];
    let m = "u1000.med";
    let s = int(APx("u103C.wide", "A") / 2) - APx(m, "_BD") + MINx(m) - ADVx("u103C.wide");
    let a = APx("u103C.wide", "A") - ADVx("u103C.wide") - ADVx(c);
    if s > 0;
    {
        pos @class103CWide $c' <$s 0 $a 0> @cMedWide;
    }

    pos [@class103CNarr @class103CWide] [@cCons]' <0 0 0 0> @cMed;

#    pos u103C                u1014.alt' <0 110 52 0>   u1013.med; # Sanskrit #126
} dist_103C_Cons;

#-----------------------------------------------------------------------


do  for b = [AA BS BD L U Y];
    let lk = "base_"+b+"_base";
    let bc = "@" + b;
    let mc = "@_" + b;
    {
lookup $lk {
    pos base $bc mark $mc;
} $lk;
    }

lookup base_BDM_mark {
    pos mark @BDM_MarkBase mark @_BDM;
} base_BDM_mark;

lookup base_BSM_mark {
    pos mark @BSM_MarkBase mark @_BSM;
} base_BSM_mark;

@LM_Filter = [@LM_MarkBase @_LM];
lookup base_LM_mark {
    lookupflag UseMarkFilteringSet @LM_Filter;
    pos mark @LM_MarkBase mark @_LM;
} base_LM_mark;

lookup base_LM_mark_context {
    lookupflag UseMarkFilteringSet @LM_Filter;
    ignore pos [u101B u101B.alt] @LM_MarkBase @_LM';
    pos @LM_MarkBase @_LM' lookup base_LM_mark;
} base_LM_mark_context;

#-----------------------------------------------------------------------

# Adding advanced width for spacing marks (defined as marks in GDEF)
lookup dist_SpacingMarks {
do  let a = ADVx("u103C");
    let b = ADVx("uAA70");
    {
        pos [@class103CNarr @class103CWide] <0 0 $a 0>;
        # AA70 is a spacing mark in isolated form
        # pos uAA70 <0 0 $b 0>;
    }
} dist_SpacingMarks; 

lookup dist_dflt_SpacingMarks {
do  let a = ADVx("u103C");
    let b = ADVx("uAA70");
    {
        pos [@class103CNarr @class103CWide] @cCons' <$a 0 $a 0>;
        #pos uAA70 @cCons' <$b 0 $b 0>;
    }
} dist_dflt_SpacingMarks;

do  let bases = feaclass('GDEF_bases');
    let us = feaclass('U');
    let gs = " ".join(x for x in bases if x not in us);
    { @nonU = [ $gs ]; }

lookup dist_SpacingRedup {
    ignore pos [u1083 u1062] uAA70';
    ignore pos [u1083 u1062] @cToneNonU uAA70';
do  for g = [u102D_uAA70 u102E_uAA70 uAA70];
    let b = MAXx(g) - MINx(g);
    let a = MAXx("uAA70") - MINx("uAA70");
    let hb = int(b / 2);
    {
        pos @nonU $g' <$b 0 0 0> [u1083 u1062] @cTone;
        pos @nonU $g' <$b 0 0 0> @cTone;
        pos @nonU $g' <$b 0 $b 0>;
#        pos $g' <0 0 $a 0>;
    }
} dist_SpacingRedup;

lookup shift_103C_udia {
# shift upper diacritics that clash with the u103C
do  for w = [narr wide];
    for c = @U;
    for u = [@_U];
    let g = "u103C.alt." + w;
    let cname = "@class103C" + w.title();
    let isgood = c in feaclass("cConsNar" if w == "narr" else "cConsWide");
    let ydiff = APy(g, "UL") - MAXy(u) - APy(u, "_U") + APy(c, "U");
#    let maxs = APx(g, "UL") - ADVx(g);
#    let s = maxs - APx(c, "U") + APx(u, "_U") - MINx(u) + MAXx(u) if isgood else -1;
    let maxs = APx(g, "UL");
    let s = maxs - APx(c, "U") + APx(u, "_U");
    let s = s - maxs if ydiff >= 0 else s;
    if s > 20 and isgood;
    {
        pos [$cname] $c $u' <$s 0 $s 0>;
    }
} shift_103C_udia;

# Normally u1037 attaches to u103D or u102F. But when the latter two
# become part of a 103C ligature, they become reordered before a 
# consonant and the attachment breaks.
# This 'hack' gets it close to where it should be.
### NB: Some configurations and advance width still need to be adjusted
lookup kern_103Clig_1037 {
do  for w = [narr wide];
    for alt = [none alt];
    for g = [u103C_u103D u103C_u102F];
    let gname = g + "." + alt + "." + w if alt == "alt" else g + "." + w;
    let base = "u1002" if w == "narr" else "u1000";
    let a = APx(gname, "L") - ADVx(gname) - APx(base, "L");
    let b = -2 * APx("u1037", "_L") + 10;
    if a > 0;
    {
        pos $gname [@cCons] [@_U] u1037' <$a 0 $b 0>;
        pos $gname [@cCons]       u1037' <$a 0 $b 0>;
    }
} kern_103Clig_1037;

# groups of consonants open or closed on the left used to kern on right side of u1031
@group_open =   [u1001 u1006 u1009 u100A u100D u1012 u1018 u101E u1021 u103F 
                 u107C u1080];
@group_closed = [u1000 u1002 u1003 u1004 u1005 u1007 u1008 u100B u100C u100E 
                 u100F u1010 u1011 u1013 u1014 u1015 u1016 u1017 u1019 u101A 
                 u101B u101C u101D u101F u1020 u1050 u1051 u1052 u1053 u1054 
                 u1055 u105A u105B u105C u105D u1061 u1065 u1066 u106E u106F 
                 u1070 u1075 u1076 u1077 u1078 u107A u107B u107C u107D u107E
                 u107F u1081];

lookup kern_1031_open {
    pos u1031 @group_open -60;
} kern_1031_open;

lookup kern_1031_closed {
    pos u1031 @group_closed -20;
} kern_1031_closed;

#-----------------------------------------------------------------------
# This section deals with 101B and some lower diacritics

# Adding LSB to ensure that the lower diacritic doesn't protrude 
# backwards into a previous cluster.
# Adding RSB to ensure that the next *base* glyph is spaced correctly
lookup mark_101Balt {
    pos u101B.alt u103E_u1030' lookup base_BD_base;
    pos u101B.alt' <100 0 100 0> u103E_u1030' <-90 0 0 0>;
    pos u101B.alt' <88 0 88 0>   u103E_u102F' <-78 0 0 0>;
    pos u101B.alt' <53 0 53 0>   u1030.med'   <-43 0 0 0>;
    pos u101B.alt' <12 0 12 0>   u102F.med'   <-2 0 0 0>;
#    pos u101B.alt' <12 0 12 0>   [u1032 u1036]' u102F.med' <-2 0 0 0>;
} mark_101Balt;
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Input sequence is "cons. u102F u1032" with u1032 attaching to the cons.
lookup shift_1032 {
# shift the 1032 so it sits over the cons
do  for g = [u100D u1025 u105D u103B u100F_u100D];
    let s = APx(g, "U") - ADVx(g) - APx("u102F", "Y") + APx("u1032", "_Y") - APx("u1032", "_U");
    if s < 0;
    {
        pos $g u102F u1032' <$s 0 0 0>;
    }
} shift_1032;
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Input sequence is "u101B u103E u1031? u1037" and u1037 should be positioning past the tail of u101B.
# (However, u1031 is reordered before we get here, so it's not part of the lookup)
# Shift the AP "LM" so 1037 positions past the tail

lookup anchor_LM {
do  for g = [u103E];
    let a  = APx("u101B.long", "L") - APx("u101B.long", "BS") + APx(g, "_BS");
    let gy = APy(g, "LM");
    if a > 0;
    {
        pos mark $g <anchor $a $gy> mark @_LM;
    }
} anchor_LM;

lookup shift_1037 {
        pos u101B.long u103E' @_LM' lookup anchor_LM;
} shift_1037;
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Stack small medials
lookup base_SJ_mark {
    pos mark @SJ_MarkBase mark @_SJ;
} base_SJ_mark;
#-----------------------------------------------------------------------

# Special mkmk lookup to correct some rules in the base_LM_mark lookup 
# where certain upper marks or re-ordered glyphs are present
# !! A mkmk lookup but it must come before lookup extend_base_L_base !!
#  - DISABLED 2021-Mar-10 - Not sure this is relevant anymore - see "lookup base_LM_mark" above
# lookup mk2mk_LM {
#   pos mark @LM_MarkBase mark @_LM;
# } mk2mk_LM;

#-----------------------------------------------------------------------
# This lookup excluively for KSW (Sgaw Karen) language
# This language positions u1037 to the left of any tail or lower diacritic
# NB: Use this for base glyphs. Lower diacritics use mkmk "lookup base_LLM_mark".
lookup mark_KSW_shift1037 {
do  for g = [u101B u103B u1061 u1066 u1066.slanth]; # base glyphs
    let gx = APx(g, "LL");
    let gy = APy(g, "LL");
    {
        pos base $g <anchor $gx $gy> mark @_L;
    }
} mark_KSW_shift1037;

# The above lookup is for certain base glyphs. The following lookup is for lower diacritics.
# The lookups need to be in this order in case there is a matched base glyph and a lower diacritic.
@LLM_Filter = [@LLM_MarkBase @_LLM];
lookup base_LLM_mark {
    lookupflag UseMarkFilteringSet @LLM_Filter;
    pos mark @LLM_MarkBase mark @_LLM;
} base_LLM_mark;

lookup shift_for_103B {
do  for g = @cMed;
    let s = -int((MAXx(g) - MINx(g))/2);
    {
        pos $g <$s 0 0 0> u103B;
    }
} shift_for_103B;

lookup shift_for_103B_from_wrap {
do  for w = [u103C u103C.alt.narr u103C.alt.wide u103C.wide];
    for c = @cCons;
    # u103B is positioned after the consonant inside the wrap, positioned by sidebearings.
    # u103B needs to be positioned after the wrap so the the lower vertical tail of the wrap
    # overlaps the lower vertical tail of the u103B.
    # To calculate the mount that the u103B needs to be shifted
    # - take off the advance width of the consonant
    # - take off the advance width of the wrap
    #   (which is a mark so no advance width in terms OpenType but the R AP is set to the width of the wrap)
    # - add back the location of the LL AP on the wrap
    # - add back the space to the left of the u103B (using the LL AP)
    let s = -ADVx(c) - APx(w, "R") + APx(w, "LL") - APx("u103B", "LL");
    {
        pos $w $c' <0 0 $s 0> u103B;
    }
} shift_for_103B_from_wrap;
