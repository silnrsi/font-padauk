
# *********************
# define named classes
# *********************

# autogenerated classes begin with @c

@BigUMark = [u1004.kinzi u1004.kinzi_u102D u1004.kinzi_u102E u1004.kinzi_u1036
    u101B.kinzi u101B.kinzi_u102D u101B.kinzi_u102E u101B.kinzi_u103A u102D u102D_u1036
    u102E u1032 u1032_u102D u1032_u102E u1033 u1034 u1035 u103A u1072 u1073 u1074 u1085];

@class103C_noalt = [u103C u103C.wide u103C_u103D.narr u103C_u103D.wide u103C_u102F.narr u103C_u102F.wide];

@class103C_noalt_tri = [u103C_u103D.narr.tri u103C_u103D.wide.tri];

@classUpperVowel = [u102D u102D_u1036 u102E u1032_u102D u1033 u1034 u1035 u1071 u1072 u1073
    u1074 u1085 u1086];
	
# Mark attachment classes (defined in GDEF, used in lookupflags)
@class103CLig = [u102F.med u103C u103C.wide u103C_u103D.narr u103C_u103D.wide u103C_u102F.narr
    u103C_u102F.wide u103D u103D.tri];

# @cConsMedSml = [u1000.med u1002.med u1005.med u1006.med u1007.med u1008.med u1010.med u1011.med
#     u1012.med u1013.med u1015.med u1019.med u101E.med u103D];

do  let c = feaclass("c_thai");
    let tm = " ".join(x if "med" in x else "" for x in c);
{ @c_thai_med = [ $tm ]; }

do  let c = feaclass("c_thai");
    let no_tm = " ".join(x.replace("med.", "") if "med" in x else "" for x in c);
{ @cno_thai_med = [ $no_tm ]; }

do  let c = feaclass("cno_sml");
    let n = " ".join(x+".med" if x+".med" in feaclass("c_med") else x for x in c);
{ @cno_sml_med = [ $n ]; }

@cConsNarTall = [u100C u100D u100D_u100E];

@cOversizedSmlMedials = [u100C.med u1009.med u100A.med u100F.med u101B.med u1021.med u103F.med u1050.med u1051.med];

@UpperNarrowMarks = [@usvowel u1036 u103A];

include(../source/padauk-dflt_GSUB.feax)
# -------------
# GSUB lookups
# -------------

# ****
# ccmp
# ****

# The following is a debugging tool so you can find out whether the app is rendering with OpenType or not.
# The string "RenderingUnknown" will be rendered as "RenderingOpenType":
lookup _FontCheck1_target {
  lookupflag IgnoreMarks ;
    sub U n k n o w n by O ;
} _FontCheck1_target ;

lookup FontCheck1 {
  lookupflag IgnoreMarks ;
    sub [ R ]e n d e r i n g U' lookup _FontCheck1_target n'  k'  n'  o'  w'  n'  ;
} FontCheck1;

lookup _FontCheck2_target {
  lookupflag IgnoreMarks ;
    sub O by O p e n T y p e ;
} _FontCheck2_target ;

lookup FontCheck2 {
  lookupflag IgnoreMarks ;
    sub [ R ]e n d e r i n g O' lookup _FontCheck2_target ;
} FontCheck2;



# ****
# locl
# ****

do  for e = [dot tri slantr slanth csh];
    let lk = "mym2_locl_"+e;
    let no = "@cno_"+e;
    let c = "@c_"+e;
    {
lookup $lk {
    sub $no by $c;
} $lk;
    }

@khamc = [u1086.kham];
@no_khamc = [u1086];

lookup mym2_locl_khamti {
    sub @no_khamc by @khamc;
} mym2_locl_khamti;


lookup cv06 {
#    sub @cno_kham by @c_kham; # Khamti dotted cons use VS01
    sub @no_khamc by @khamc;
} cv06;

# ****
# cvxx
# ****

lookup cv01 {
    sub @cno_dot by @c_dot ; # filled dots (fdot)
} cv01;

lookup cv02 {
    sub @cno_tri by @c_tri ; # Tear drop style washwe (wtri)
} cv02;

lookup cv03 {
    sub @cno_csh by @c_csh ; # Asho Chin variants (asho)
} cv03;

lookup cv04 {
    sub @cno_thai by @c_thai ; # Mon Thai variants (thai)
} cv04;

lookup cv05 {
    sub @cConsPreAiph by @cConsAiph ; # Aiton and Phake variants over Khamti (aiph)
    sub @cNoAiph      by @cAiph     ; # Other Aiton and Phake variants
} cv05;

lookup cv07 {
    sub @cno_slanth from [@c_slanth @c_slantr] ; # Slanted hato (hsln)
} cv07;

lookup cv09 {
    sub uAA6C by uAA6C.alt ; # Tai Laing variant
} cv09;

lookup cv10 {
    # Tai Laing variants
    sub uA9E4 by uA9E4.alt;
    sub uA9E8 by uA9E8.alt;
} cv10;

# ****
# rphf
# ****

lookup mym2_rphf_kinzi {
    sub u1004 u103A u1039  by u1004.kinzi;
    sub u105A u103A u1039  by u1004.kinzi; # Mon kinzi
    sub u101B u103A u1039  by u101B.kinzi;
} mym2_rphf_kinzi;

lookup mym2_rphf_kinzi_mon_thai {
    sub u1004.kinzi by u1004.kinzi.thai; # Mon thai kinzi
} mym2_rphf_kinzi_mon_thai;

# ****
# pref
# ****
lookup mym2_pref_decompose {
    sub u1026 by u1025 u102E;
    sub u1029 by u103C u101E; # presentation not storage sequence (OT reorder has already happened); must precede U103C.wide lookup
#    sub u106F by u101F u103E; # Disabled, see @needsUTall
#    sub u107E by u107D u103E; # Disabled, see @needsUTall
} mym2_pref_decompose;

lookup mym2_pref_miscLig {
    sub u103C u1014 u1039 u1010 by u1014_u1010_u103C;
    sub u103C u101E u1039 u1010 by u101E_u1010_u103C;
    sub u101B u103B  by u101B_u103B;
    sub u103B u103D  by u103B_u103D;
    sub u103D u103E  by u103D_u103E;
    sub u103B_u103D u103E  by u103B_u103D_u103E;
    sub u103B_u103D u103E.alt  by u103B_u103D_u103E;
    sub u103B u103D u103E by u103B_u103D_u103E;
    sub u103B u103E u103E.alt by u103B_u103D_u103E;
} mym2_pref_miscLig;

lookup mym2_pref_u103Cwide {
    sub u103C' [@cConsWide u1075.kham]            by u103C.wide;
} mym2_pref_u103Cwide;

lookup mym2_pref_signsLig {
  lookupflag IgnoreBaseGlyphs UseMarkFilteringSet @_U;
    sub u1004.kinzi u102D  by u1004.kinzi_u102D;
    sub u1004.kinzi u102E  by u1004.kinzi_u102E;
    sub u1004.kinzi u1032  by u1004.kinzi_u1032;
    sub u1004.kinzi u1033  by u1004.kinzi_u1033;
    sub u1004.kinzi u1036  by u1004.kinzi_u1036;
    sub u1004.kinzi u103A  by u1004.kinzi_u103A;
    sub u1004.kinzi u102D_u1036  by u1004.kinzi_u102D_u1036;
    sub u101B.kinzi u102D  by u101B.kinzi_u102D;
    sub u101B.kinzi u102E  by u101B.kinzi_u102E;
    sub u101B.kinzi u103A  by u101B.kinzi_u103A;
    sub u102D u1036  by u102D_u1036;
    sub u102D uAA7C  by u102D_uAA7C; # Tai Laing (stays decomposed?)
    sub u102E uAA7C  by u102E_uAA7C; # Tai Laing
    sub u103A uAA7C  by u103A_uAA7C; # Tai Laing
    sub u1086 uAA7C  by u1086_uAA7C;
    sub uA9E5 uAA7C  by uA9E5_uAA7C;
    sub u102D u1032  by u1032_u102D;
    sub u102E u1032  by u1032_u102E;
    sub u102E u1036  by u102E_u1036; # Moken
    sub u1032 u1036  by u1032_u1036; # Moken
} mym2_pref_signsLig;

lookup DFLT_signsLig {
#  lookupflag IgnoreBaseGlyphs, UseMarkFilteringSet @_U;
#  lookupflag UseMarkFilteringSet @_U;
    lookupflag 0;
    sub u1004.kinzi u102D  by u1004.kinzi_u102D;
    sub u1004.kinzi u102E  by u1004.kinzi_u102E;
    sub u1004.kinzi u1032  by u1004.kinzi_u1032;
    sub u1004.kinzi u1033  by u1004.kinzi_u1033;
    sub u1004.kinzi u1036  by u1004.kinzi_u1036;
    sub u1004.kinzi u103A  by u1004.kinzi_u103A;
    sub u1004.kinzi u102D_u1036  by u1004.kinzi_u102D_u1036;
    sub u101B.kinzi u102D  by u101B.kinzi_u102D;
    sub u101B.kinzi u102E  by u101B.kinzi_u102E;
    sub u101B.kinzi u103A  by u101B.kinzi_u103A;
    sub u102D u1036  by u102D_u1036;
    sub u102D uAA7C  by u102D_uAA7C; # Tai Laing (stays decomposed?)
    sub u102E uAA7C  by u102E_uAA7C; # Tai Laing
    sub u103A uAA7C  by u103A_uAA7C; # Tai Laing
    sub u1086 uAA7C  by u1086_uAA7C;
    sub uA9E5 uAA7C  by uA9E5_uAA7C;
    sub u102D u1032  by u1032_u102D;
    sub u102E u1032  by u1032_u102E;
    sub u102E u1036  by u102E_u1036; # Moken
    sub u1032 u1036  by u1032_u1036; # Moken
} DFLT_signsLig;


# ****
# blwf
# ****

lookup mym2_blwf_u1039med {
    sub u1039 @cno_med by @c_med;
} mym2_blwf_u1039med;

lookup mym2_blwf_u1039med_mon_thai {
    sub u1039 @cno_thai_med by @c_thai_med; # Mon Thai variants (thai)
} mym2_blwf_u1039med_mon_thai;


lookup mym2_medVowelSubst {
    sub u102F by u102F.med;
    sub u1030 by u1030.med;
} mym2_medVowelSubst;

lookup mym2_blwf_medVowels {
    @needsUtall = [u1008 u100B u100D u1020 u1025 u105A u105B u105D u1061 u106F u1070 u107A u107E];
    
    ignore sub @c103C_all @cCons     [u103E u103E.alt u103E.slantr] @_U [u102F u1030]';
    ignore sub @c103C_all @cCons     [u103E u103E.alt u103E.slantr]     [u102F u1030]';
    ignore sub @c103C_all @cCons @_U  u1030'; # tallUU after wrap
    ignore sub @c103C_all @cCons      u1030'; # tallUU after wrap
    ignore sub @needsUtall       @_U [u102F u1030]';
    ignore sub @needsUtall           [u102F u1030]';
    ignore sub @cCons     @c_med @_U [u102F u1030]';
    ignore sub @cCons     @c_med     [u102F u1030]';
    ignore sub [u102F.med u1030.med]' @c_med;
    ignore sub u105D u1032_u102D      u102F'; #MNW 3103
    
    sub @cCons         [u102F u1030]'lookup mym2_medVowelSubst;
    sub @cCons     @_U [u102F u1030]'lookup mym2_medVowelSubst;
    sub @cCons @_U @_U [u102F u1030]'lookup mym2_medVowelSubst;
    sub @cCons [u103E u103E.slantr u103E.slanth]     [u102F u1030]'lookup mym2_medVowelSubst;
    sub @cCons [u103E u103E.slantr u103E.slanth] @_U [u102F u1030]'lookup mym2_medVowelSubst;
} mym2_blwf_medVowels;

lookup mym2_blwf_u103CLig {
  lookupflag IgnoreBaseGlyphs MarkAttachmentType @cLowerMarkAttach;
    sub u103C      u102F.med by u103C_u102F.narr;
    sub u103C      u103D     by u103C_u103D.narr;
    sub u103C      u103D.tri by u103C_u103D.narr.tri;
    sub u103C.wide u102F.med by u103C_u102F.wide;
    sub u103C.wide u103D     by u103C_u103D.wide;
    sub u103C.wide u103D.tri by u103C_u103D.wide.tri;
} mym2_blwf_u103CLig;

lookup mym2_103Ealt_Subst {
    sub u103D_u103E  by u103D_u103E.small;
    sub u103E.slantr by u103E.alt;
    sub u103E        by u103E.alt;
    # sub @cConsMedSml by @c_sml;
} mym2_103Ealt_Subst;

lookup mym2_blwf_103Ealt {
    sub @c103C_all [@cCons] u103D_u103E'  lookup mym2_103Ealt_Subst;
    sub @c103C_all [@cCons] u103E.slantr' lookup mym2_103Ealt_Subst;
    sub @c103C_all [@cCons] u103E'        lookup mym2_103Ealt_Subst;
    # sub @c103C_all [@cCons] @cno_sml_med' lookup mym2_103Ealt_Subst;
    sub                u1009  u103E'        lookup mym2_103Ealt_Subst;
} mym2_blwf_103Ealt;

# -------------------------  Kayah (KYU ) ---------------------------
#	I tried to prevent the u103C_u103D.narr.tri ligature formation
#	by creating the u103D_u103E.small.tri first, but that didn't work.
#	So here I reversed the u103C_u103D.narr.tri ligature while creating
#	the u103D_u103E.small.tri. Maybe someone will find more elegant way.

lookup mym2_smalltri_Subst1 {
    sub u103C_u103D.narr.tri by u103C; # Kayah
} mym2_smalltri_Subst1;

lookup mym2_smalltri_Subst2 {
    sub u103E.alt by u103D_u103E.small.tri; # Kayah
} mym2_smalltri_Subst2;

lookup mym2_blwf_smalltri {
    sub u103C_u103D.narr.tri' lookup mym2_smalltri_Subst1 [@cCons]' u103E.alt' lookup mym2_smalltri_Subst2; # Kayah
} mym2_blwf_smalltri;
# -------------------------------------------------------------------

lookup mym2_blwf_MonNga {
    sub u105A' u103A by u1004;
} mym2_blwf_MonNga;


# ****
# pstf
# ****

# --------------------------------------------------------------------
# This clig lookup group must come here so u102B_u103A can form
# --------------------------------------------------------------------
lookup g1037_103A_Subst {
    sub u1037 by u103A;
    sub u103A by u1037;
} g1037_103A_Subst;

# Use u102B as context so liga u102B_u103A can form
lookup mym2_swap_1037_103A {
    sub u102B u1037' lookup g1037_103A_Subst u103A' lookup g1037_103A_Subst;
} mym2_swap_1037_103A;
# ---------------------- End of lookup group -------------------------

lookup mym2_pstf_asatLig {
    sub u102B u103A  by u102B_u103A;
    sub u1062 u103A  by u1062_u103A;
#    sub u1063 u103A  by u1063_u103A; # lig not used (Sgaw Karen)
    sub u103A u1036  by u103A_u1036;
    sub u103A uAA70  by u103A_uAA70;
} mym2_pstf_asatLig;

lookup mym2_pstf_1009 {
    sub u1009' u1037 u103A by u1025;
    sub u1009'       u103A by u1025;
    sub u1009' [@c_med] [@c_med] by u1009.open;
    sub u1009' [@c_med]          by u1025;
} mym2_pstf_1009;

lookup mym2_pstf_tall_U {
#    sub [@c_med] [@_U] [u102F.med u1030.med]' by [u102F u1030];
#    sub [@c_med]          [u102F.med u1030.med]' by [u102F u1030];
#    sub [u102F.med u1030.med]' [@c_med]          by [u102F u1030];
    sub [@class103C_noalt] [@cCons] u1030.med'  by u1030;
    sub u101A u103E u102F.med' by u102F;
    sub u101A u103E u1030.med' by u1030;
    # This can't be an "ignore sub" in blws_med because lig formation happens later.
#    sub u105D u1032_u102D           u102F.med'  by u102F; #MNW 3103
} mym2_pstf_tall_U;


# ****
# pres
# ****

lookup mym2_pres_u103Cwide {
    ignore sub u103C' [@cConsNar u1075] @cno_sml_med;

    # u100C.med is in @cMedWide,
    # but since it forms a narrow ligature,
    # a wide medial is not needed.
    ignore sub u103C' [@cConsNar u1075] u100C.med;

    sub u103C' [@cConsNar u1075] @cMedWide by u103C.wide; # Some cases in Sanskrit
} mym2_pres_u103Cwide;

lookup mym2_u103CaltSubst {
    sub u103C by u103C.alt.narr;
    sub u103C.wide by u103C.alt.wide;
    sub u103C_u102F.narr by u103C_u102F.alt.narr;
    sub u103C_u102F.wide by u103C_u102F.alt.wide;
    sub u103C_u103D.narr by u103C_u103D.alt.narr;
    sub u103C_u103D.wide by u103C_u103D.alt.wide;
} mym2_u103CaltSubst;

lookup mym2_pres_u103Calt {
  lookupflag 0;
    sub [@class103C_noalt]'lookup mym2_u103CaltSubst [@cCons] [@c_med] [@c_med] [@BigUMark];
    sub [@class103C_noalt]'lookup mym2_u103CaltSubst [@cCons] [@c_med u103B u101B_u103B u103E u103E.alt u103D_u103E u103D_u103E.small.tri] [@BigUMark];
    sub [@class103C_noalt]'lookup mym2_u103CaltSubst [@cCons] [@BigUMark];
} mym2_pres_u103Calt;

lookup mym2_u103Calt_triSubst {
    sub u103C_u103D.narr.tri by u103C_u103D.alt.narr.tri;
    sub u103C_u103D.wide.tri by u103C_u103D.alt.wide.tri;
} mym2_u103Calt_triSubst;

lookup mym2_pres_u103Calt_tri {
  lookupflag 0;
    # The following lookup has no affect on the test data, but might be needed, as seen in an above lookup.
    # sub [@class103C_noalt_tri]'lookup mym2_u103Calt_triSubst [@cCons] [@c_med] [@c_med] [@BigUMark];
    sub [@class103C_noalt_tri]'lookup mym2_u103Calt_triSubst [@cCons] [@c_med u103B u101B_u103B u103D_u103E u103E u103E.alt] [@BigUMark];
    sub [@class103C_noalt_tri]'lookup mym2_u103Calt_triSubst [@cCons] [@BigUMark];
} mym2_pres_u103Calt_tri;

lookup mym2_pres_u103Copen {
    # If there are two medials an open wrap is needed.
    sub [u103C.wide u103C.alt.wide]' [@cCons] @cno_sml_med @cno_sml_med @BigUMark by u103C.alt.open.wide; 
    sub [u103C.wide u103C.alt.wide]' [@cCons] @cno_sml_med @cno_sml_med           by u103C.open.wide; 
    sub [u103C u103C.alt.narr]' [@cConsNar] @cno_sml_med @cno_sml_med @BigUMark by u103C.alt.open.narr; 
    sub [u103C u103C.alt.narr]' [@cConsNar] @cno_sml_med @cno_sml_med           by u103C.open.narr; 

    # If the base consonant is a tall, narrow consonant, a open wrap is needed.
    sub [u103C u103C.alt.narr]' [@cConsNarTall] @cno_sml_med @BigUMark by u103C.alt.open.narr; 
    sub [u103C u103C.alt.narr]' [@cConsNarTall] @cno_sml_med           by u103C.open.narr; 

    # Some medials that are on the large size need an open wrap, even if a small form exists.
    sub [u103C u103C.alt.narr]' [@cConsNar u1014.alt u1075] @cOversizedSmlMedials @BigUMark by u103C.alt.open.narr; 
    sub [u103C u103C.alt.narr]' [@cConsNar u1014.alt u1075] @cOversizedSmlMedials           by u103C.open.narr;

    ignore sub [u103C u103C.alt.narr]' [@cConsNar u1014.alt u1075] @cno_sml_med @BigUMark;
    ignore sub [u103C u103C.alt.narr]' [@cConsNar u1014.alt u1075] @cno_sml_med;
    sub [u103C u103C.alt.narr]' [@cConsNar u1014.alt u1075] @cMed @BigUMark by u103C.alt.open.narr; 
    sub [u103C u103C.alt.narr]' [@cConsNar u1014.alt u1075] @cMed           by u103C.open.narr;
    sub [u103C u103C.alt.narr]' u101B                                       by u103C.open.narr;
} mym2_pres_u103Copen;


# ****
# abvs
# ****

@cno_AA70 = [u102D u102E u103A u1085];
@classAA70Lig = [@cno_AA70 u1086 u1086.kham uAA70];
@classAA70Skips = [u109B u109B.dot];
@cAA70 = [u102D_uAA70 u102E_uAA70 u103A_uAA70 u1085_uAA70];
lookup mym2_abvs_redupLig {
  lookupflag IgnoreBaseGlyphs IgnoreLigatures UseMarkFilteringSet @classAA70Lig;
    sub @cno_AA70 uAA70 by @cAA70;
    sub u1086.kham uAA70  by u1086_uAA70;
} mym2_abvs_redupLig;

lookup convno_aa70 {
    sub @cAA70 by @cno_AA70;
} convno_aa70;

lookup insert_aa70 {
    sub @classAA70Skips by @classAA70Skips uAA70;
} insert_aa70;

lookup mym2_abvs_redupLig2 {
    sub @cAA70' lookup convno_aa70 @classAA70Skips' lookup insert_aa70;
} mym2_abvs_redupLig2;

# ****
# blws
# ****

lookup delete_circledash {
    sub u1038 circledash by u1038;
    sub u103E circledash by u103E;
    sub circledash u1038 by u1038;
} delete_circledash;

lookup clear_errors {
    sub u1038' lookup delete_circledash circledash [u1069 u106A u106B u106C u106D];
    sub u103E' lookup delete_circledash circledash u1060;
    sub u104B circledash' lookup delete_circledash u1038;
} clear_errors;

lookup mym2_blws_miscLig {
    sub u100A u100A.med  by u100A_u100A; # Mon stylistic default
    sub u100B u100B.med  by u100B_u100B;
    sub u100B u100C.med  by u100B_u100C;
    sub u100D u100D.med  by u100D_u100D;
    sub u100D u100E.med  by u100D_u100E;
    sub u100F u100B.med  by u100F_u100B;
    sub u100F u100D.med  by u100F_u100D;
    sub u1010.med u103D  by u1010_u103D.med;
    sub u1020 u1020.med  by u1020_u1020;
    sub u1020 u103E  by u1020_u103E;
    sub u102F.med u108D  by u102F_u108D;
    sub u1030.med u108D  by u1030_u108D; # Tai Laing
    sub u103B u103D.tri u103E.slantr  by u103B_u103D_u103E.tri; # Kayah #43
    sub u103B u103D.tri  by u103B_u103D.tri; # Shan #704
    sub u103B u103E  by u103B_u103E;
    sub u103B u103E.slantr  by u103B_u103E; # Kayah
    sub u103B u103E.slanth  by u103B_u103E; # Sgaw Karen
    sub u103D.tri u103E.slantr  by u103D_u103E.tri; # Kayah
    sub u103D.tri u103E  by u103D_u103E.tri; # Shan
    sub u103D u1060  by u103D_u1060;
    sub u103E u1060  by u103E_u1060;
    sub u1051 u100C.med  by u1051_u100C;
    sub u1051 u100D.med  by u1051_u100D;
    sub u1086 uAA7C  by u1086_uAA7C; # Tai Laing (abvs, but works here too)
    sub uA9E5 uAA7C  by uA9E5_uAA7C; # Tai Laing (abvs, but works here too)
} mym2_blws_miscLig;

lookup cv11 {
    # Disable great nnya
    sub u100A_u100A by u100A u100A.med;
} cv11;

lookup mym2_blws_tlaLig {
  lookupflag UseMarkFilteringSet @_BSM;
    sub u103D u108D  by u103D_u108D;
    sub u1082 u108D  by u1082_u108D;
} mym2_blws_tlaLig;

@class103ELig = [u102F.med u1030.med u103D.tri u103E u103E.slanth u103E.slantr];
lookup mym2_blws_103ELig {
  lookupflag UseMarkFilteringSet @class103ELig;
    sub u103E u102F.med  by u103E_u102F;
    sub u103E u1030.med  by u103E_u1030;
    sub u103E.slanth u102F.med  by u103E_u102F.slanth;
    sub u103E.slanth u1030.med  by u103E_u1030.slanth;
    sub u103E.slantr u102F.med  by u103E_u102F.slantr;
    sub u103E.slantr u1030.med  by u103E_u1030.slantr;
} mym2_blws_103ELig;

lookup mym2_altTailSubst {
    sub u100A by u100A.alt;
    sub u1014 by u1014.alt;
    sub u1014.thai by u1014.alt.thai;
} mym2_altTailSubst;

lookup mym2_blws_altTail {
  lookupflag 0;
    sub [u100A u1014 u1014.thai]' lookup mym2_altTailSubst  [@_BD @_BS u103B u102F u1030 u102F.med u1030.med u1060 u1010_u103D.med];
    sub [u100A u1014 u1014.thai]' lookup mym2_altTailSubst  @_U @_BS;
} mym2_blws_altTail;

lookup mym2_blws_raLong {
    ignore sub u101B' [u102F.med u1030.med];
    sub u101B' [u103E u103E.slantr] by u101B.long;
    sub u101B' [@cMed u103D]                   [u102F u1030] by u101B.long;
    sub u101B' [@cMed u103D] @UpperNarrowMarks [u102F u1030] by u101B.long;
} mym2_blws_raLong;

lookup mym2_blws_raShort {
    ignore sub u101B.long' [u103E u103E.slantr];
    sub u101B'                   [u102F.med u1030.med]                   by u101B.alt;
    sub u101B'                   [u102F.med u1030.med] @UpperNarrowMarks by u101B.alt;
    sub u101B' @UpperNarrowMarks [u102F.med u1030.med]                   by u101B.alt;
    sub u101B' [u103E_u102F u103E_u1030 u103D_u103E] by u101B.alt;
    sub @c103C_all u101B' by u101B.alt;
} mym2_blws_raShort;


# ****
# psts
# ****

lookup mym2_psts_103B {
  lookupflag IgnoreMarks;
    sub u101B u103B by u101B_u103B;
} mym2_psts_103B;

lookup mym2_psts_miscLig {
    sub u1000 u103B u1015 u103A  by u1000_u103B_u1015_u103A;
    sub u1000 u1001.med u103B  by u1000_u1001_u103B;
    sub u1009 u102C  by u1009_u102C;
    sub u100A u100A.med  by u100A_u100A;
    sub u1014 u1010.med u103B  by u1014_u1010_u103B;
} mym2_psts_miscLig;


# ****
# rlig (used for reordering glyphs)
# ****
# --------------------------------------------------------------------
# First are sets of glyphs to be reordered
# --------------------------------------------------------------------

@updot = [u1032 u1036];
# ----------------------- UDiac - u102F.med --------------------------
lookup UDiac_102FmedSubst1 {
    sub @updot by u102F.med @updot;
} UDiac_102FmedSubst1;

lookup UDiac_102FmedSubst2 {
    sub @updot u102F.med by @updot;
} UDiac_102FmedSubst2;

# ----------------------- u102B - u1036 ------------------------------
lookup g102B_1036_Subst {
    sub u102B by u1036;
    sub u1036 by u102B;
} g102B_1036_Subst;

# ----------------------- u1032 - u102F ------------------------------
lookup g1032_102F_Subst {
    sub u1032 by u102F;
    sub u102F by u1032;
} g1032_102F_Subst;

# ----------------------- u1032 - u1030.med --------------------------
lookup g1032_1030med_Subst {
    sub u1032 by u1030.med;
    sub u1030.med by u1032;
} g1032_1030med_Subst;

# ----------------------- u1062 - u1086 ------------------------------
lookup g1062_1086_Subst {
    sub u1062 by u1086;
    sub u1086 by u1062;
} g1062_1086_Subst;

# ----------------------- u1062 - u1086.kham -------------------------
lookup g1062_1086k_Subst {
    sub u1062 by u1086.kham;
    sub u1086.kham by u1062;
} g1062_1086k_Subst;

# -----------------------u1062 - u1086_uAA70 -------------------------
lookup g1062_1086_uAA70_Subst {
    sub u1062 by u1086_uAA70;
    sub u1086_uAA70 by u1062;
} g1062_1086_uAA70_Subst;

# ------------------------- Tai Laing (tla) --------------------------
# reorder tone to precede the vowel; tone should then attach to consonant

# reorder so that tone u108D precedes vowel u1062 or u1083
lookup tla_Vowel108DSubst1 {
    sub u1062 by u108D u1062;
    sub u1083 by u108D u1083;
} tla_Vowel108DSubst1;

lookup tla_Vowel108DSubst2 {
    sub u1062 u108D by u1062;
    sub u1083 u108D by u1083;
} tla_Vowel108DSubst2;

# I have to have separate lookup groups for each *tone* 
# Otherwise it keeps adding tones if more than one rule in each lookup

# reorder so that tone uAA7C precedes vowel u1083
@cToneAndKham = [u1038 u1087 u1088 u1089 u108A u108B u108C u108F u109C uAA7B u109A u109B
                 u1038.dot u1087.dot u1088.dot u1089.dot u108A.dot uAA7B.dot u109A.dot u109B.dot];
lookup tla_VowelAA7C_Subst {
    sub u1083 by uAA7C;
    sub uAA7C by u1083;
} tla_VowelAA7C_Subst;

lookup reorder_AA70_left {
    sub @cToneAndKham by uAA70 @cToneAndKham;
    sub u1083 by uAA70 u1083;
} reorder_AA70_left;

lookup reorder_AA70_right {
    sub @cToneAndKham uAA70 by @cToneAndKham;
    sub u1083 uAA70 by u1083;
} reorder_AA70_right;

# --------------------------------------------------------------------
# Next is the list of glyphs to be reordered
# --------------------------------------------------------------------
lookup mym2_swap_thing1_thing2 {
    ignore sub @cno_AA70 [u109B u109B.dot]' uAA70';
    sub u1032' lookup UDiac_102FmedSubst1    u102F.med'   lookup UDiac_102FmedSubst2; # Pa'o Karen
    sub u1036' lookup UDiac_102FmedSubst1    u102F.med'   lookup UDiac_102FmedSubst2; # Pa'o Karen
    sub u102B' lookup g102B_1036_Subst       u1036'       lookup g102B_1036_Subst; # Mon
    sub u1032' lookup g1032_102F_Subst       u102F'       lookup g1032_102F_Subst;
    sub u1032' lookup g1032_1030med_Subst    u1030.med'   lookup g1032_1030med_Subst; # Kayah (kyu)
    sub u1062' lookup g1062_1086_Subst       u1086'       lookup g1062_1086_Subst; # Shan
    sub u1062' lookup g1062_1086k_Subst      u1086.kham'  lookup g1062_1086k_Subst; # Khamti Shan
    sub u1062' lookup g1062_1086_uAA70_Subst u1086_uAA70' lookup g1062_1086_uAA70_Subst; # Khamti Shan
    sub u1062' lookup tla_Vowel108DSubst1    u108D'       lookup tla_Vowel108DSubst2; #Tai Laing (tla)
    sub u1083' lookup tla_Vowel108DSubst1    u108D'       lookup tla_Vowel108DSubst2; #Tai Laing (tla)
    sub u1083' lookup tla_VowelAA7C_Subst    uAA7C'       lookup tla_VowelAA7C_Subst; #Tai Laing (tla)
    sub u1083' lookup reorder_AA70_left      @cToneAndKham'  uAA70'   lookup reorder_AA70_right;
    sub u1083' lookup reorder_AA70_left      uAA70'       lookup reorder_AA70_right;
    sub @cToneAndKham' lookup reorder_AA70_left     uAA70'       lookup reorder_AA70_right;
} mym2_swap_thing1_thing2;

# --------------------------------------------------------------------
### End of reordering section
# --------------------------------------------------------------------

lookup consmed_sml_subst {
    sub @cno_sml_med by @c_sml;
} consmed_sml_subst;

lookup consmed_sml {
    sub @c103C_all @cCons @cno_sml_med' lookup consmed_sml_subst @cno_sml_med' lookup consmed_sml_subst;
    sub @c103C_all @cCons @cno_sml_med' lookup consmed_sml_subst;
    sub [u100D u1025] @cno_sml_med' lookup consmed_sml_subst @cno_sml_med' lookup consmed_sml_subst;
    sub [u100D u1025] @cno_sml_med' lookup consmed_sml_subst;
    sub @cno_sml_med' lookup consmed_sml_subst @cno_sml_med' lookup consmed_sml_subst;
} consmed_sml;
